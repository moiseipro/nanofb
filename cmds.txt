---------  Сгенерировать файл с необходимыми пакетами Python
pip3 freeze > requirements.txt  # Python3
pip freeze > requirements.txt  # Python2 (можно просто pip freeze)

---------  Установить пакеты из файла requirements.txt
pip install -r requirements.txt

---------  Запуск сервера Djasngo:
python manage.py runserver 8000 (из своей виртуальной среды) CTRL+C to stop

---------  Создание подпрограммы (после создания добавить в поле "INSTALLED_APPS" в "settings" в "nanofb"):
python manage.py startapp APPNAME

--------- Создание миграций, после активация созданных миграций (после создания, редактирования моделей):
python manage.py makemigrations
python manage.py makemigrations
python manage.py migrate --fake // помогает избавиться от конфликтов (пример: удаление несуществующего поля)


--------- Создание виртуальной среды, её активация / деактивация:
python -m venv ./venv
source ./venv/bin/activate
venv\Scripts\activate.bat - May need to add full path (c:\users\....venv\Scripts\activate.bat)
deactivate

--------- Создание проекта для Django:
django-admin startproject PROJECTNAME

--------- Собрать статические файлы (для production):
python manage.py collectstatic

--------- Перевести слова:
django-admin makemessages -l ru
django-admin makemessages -l en
django-admin compilemessages
--------- Выгрузить переводы в JS
django-admin makemessages -d djangojs -l en
django-admin makemessages -d djangojs -l ru


--------- Периодические задачи, Celery:
celery -A celery worker -l info (в папке: nanofb, где лежит файл "celery.py")
- help:
https://medium.com/@mahdi04/simple-async-django-app-with-celery-and-rabbitmq-ad4b1692c380
https://docs.celeryq.dev/en/latest/userguide/periodic-tasks.html

